{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2","program":"/Users/adamtoth-fejel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","take_mut","/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=c66223acb595bf36","-C","extra-filename=-c66223acb595bf36","--out-dir","/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps","-L","dependency=/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/adamtoth-fejel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps/libtake_mut-c66223acb595bf36.rmeta"},"prelude":{"crate_id":{"name":"take_mut","disambiguator":[18490718910335714,16603466272390289581]},"crate_root":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src","external_crates":[{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12669636623235690034,8759211680751900309]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5693088722327716739,2147858288623464010]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15524063101320593432,10022011492683157993]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14556973752653035032,10499433159243229334]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1934112228416746928,18062520869078565162]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18272308394612376465,2983342869845535113]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7982440001281678496,5082264322901945876]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17333179571007866912,15310387900280001912]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17767206385810259554,6284392829264960128]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6917085151040958166,7936695879549379973]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14883612992525439991,13188753928230923968]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8362867231865330830,11957228790523419708]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13374155178358367403,7714447127929209529]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7401024017757537210,13419518921059338139]}}],"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":0,"byte_end":4341,"line_start":1,"line_end":147,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":0,"byte_end":4341,"line_start":1,"line_end":147,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":56},{"krate":0,"index":62}],"decl_id":null,"docs":" This crate provides several functions for handling `&mut T` including `take()`.","sig":null,"attributes":[{"value":"! This crate provides several functions for handling `&mut T` including `take()`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":0,"byte_end":83,"line_start":1,"line_end":1,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":84,"byte_end":87,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! `take()` allows for taking `T` out of a `&mut T`, doing anything with it including consuming it, and producing another `T` to put back in the `&mut T`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":88,"byte_end":243,"line_start":3,"line_end":3,"column_start":1,"column_end":156}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":244,"byte_end":247,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! During `take()`, if a panic occurs, the entire process will be aborted, as there's no valid `T` to put back into the `&mut T`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":248,"byte_end":378,"line_start":5,"line_end":5,"column_start":1,"column_end":131}},{"value":"! Use `take_or_recover()` to replace the `&mut T` with a recovery value before continuing the panic.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":379,"byte_end":481,"line_start":6,"line_end":6,"column_start":1,"column_end":103}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":482,"byte_end":485,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! Contrast with `std::mem::replace()`, which allows for putting a different `T` into a `&mut T`, but requiring the new `T` to be available before being able to consume the old `T`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":486,"byte_end":668,"line_start":8,"line_end":8,"column_start":1,"column_end":183}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scoped","qualname":"::scoped","value":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":13},{"krate":0,"index":27},{"krate":0,"index":32},{"krate":0,"index":41},{"krate":0,"index":49}],"decl_id":null,"docs":" This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure.\n The references are all required to outlive the closure.","sig":null,"attributes":[{"value":"! This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4496,"byte_end":4615,"line_start":1,"line_end":1,"column_start":1,"column_end":120}},{"value":"! The references are all required to outlive the closure.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4616,"byte_end":4675,"line_start":2,"line_end":2,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4676,"byte_end":4679,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! # Example","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4680,"byte_end":4693,"line_start":4,"line_end":4,"column_start":1,"column_end":14}},{"value":"! ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4694,"byte_end":4701,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"! use take_mut::scoped;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4702,"byte_end":4727,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"! struct Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4728,"byte_end":4743,"line_start":7,"line_end":7,"column_start":1,"column_end":16}},{"value":"! let mut foo = Foo; // Must outlive scope","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4744,"byte_end":4788,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"! scoped::scope(|scope| {","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4789,"byte_end":4816,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"!     let (t, hole) = scope.take(&mut foo);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4817,"byte_end":4862,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"!     drop(t);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4863,"byte_end":4879,"line_start":11,"line_end":11,"column_start":1,"column_end":17}},{"value":"!     hole.fill(Foo); // If not called before the closure ends, causes an abort.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4880,"byte_end":4962,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"! });","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4963,"byte_end":4970,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4971,"byte_end":4978,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4979,"byte_end":4982,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Invalid Example (does not compile)","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":4983,"byte_end":5023,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"! ```ignore","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5024,"byte_end":5037,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"! use take_mut::scoped;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5038,"byte_end":5063,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"! struct Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5064,"byte_end":5079,"line_start":19,"line_end":19,"column_start":1,"column_end":16}},{"value":"! scoped::scope(|scope| {","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5080,"byte_end":5107,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"!     let mut foo = Foo; // Invalid because foo must come from outside the scope.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5108,"byte_end":5191,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"!     let (t, hole) = scope.take(&mut foo);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5192,"byte_end":5237,"line_start":22,"line_end":22,"column_start":1,"column_end":46}},{"value":"!     drop(t);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5238,"byte_end":5254,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"!     hole.fill(Foo);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5255,"byte_end":5278,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"! });","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5279,"byte_end":5286,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5287,"byte_end":5294,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"! ","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5295,"byte_end":5299,"line_start":27,"line_end":27,"column_start":1,"column_end":5}},{"value":"! `Scope` also offers `take_or_recover`, which takes a function to call in the event the hole isn't filled.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5300,"byte_end":5409,"line_start":28,"line_end":28,"column_start":1,"column_end":110}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5411,"byte_end":5433,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5650,"byte_end":5655,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Scope","qualname":"::scoped::Scope","value":"Scope {  }","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12}],"decl_id":null,"docs":" Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.\n","sig":null,"attributes":[{"value":"/ Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5513,"byte_end":5638,"line_start":38,"line_end":38,"column_start":1,"column_end":126}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":6010,"byte_end":6025,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"take_or_recover","qualname":"<Scope>::take_or_recover","value":"fn <'c, 'm, T, F> (&'c self, mut_ref: &'m mut T, recovery: F) -> (T, Hole<'c, 'm, T, F>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.","sig":null,"attributes":[{"value":"/ Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5764,"byte_end":5822,"line_start":46,"line_end":46,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5827,"byte_end":5830,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If the `Hole` is dropped without being filled, either due to panic or forgetting to fill, will run the `recovery` function to obtain a `T` to fill itself with.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5835,"byte_end":5998,"line_start":48,"line_end":48,"column_start":5,"column_end":168}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":6805,"byte_end":6809,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"take","qualname":"<Scope>::take","value":"fn <'c, 'm, T> (&'c self, mut_ref: &'m mut T) -> (T, Hole<'c, 'm, T, fn() -> T>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.\n","sig":null,"attributes":[{"value":"/ Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":6735,"byte_end":6793,"line_start":71,"line_end":71,"column_start":5,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7198,"byte_end":7203,"line_start":84,"line_end":84,"column_start":8,"column_end":13},"name":"scope","qualname":"::scoped::scope","value":"fn <'s, F, R> (f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Main function to create a `Scope`.","sig":null,"attributes":[{"value":"/ Main function to create a `Scope`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7068,"byte_end":7106,"line_start":81,"line_end":81,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7107,"byte_end":7110,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ If the given closure ends without all Holes filled, will abort the program.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7111,"byte_end":7190,"line_start":83,"line_end":83,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7980,"byte_end":7984,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"Hole","qualname":"::scoped::Hole","value":"Hole {  }","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.","sig":null,"attributes":[{"value":"/ A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7601,"byte_end":7758,"line_start":100,"line_end":100,"column_start":1,"column_end":158}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7759,"byte_end":7762,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ An unfilled `Hole<'c, 'm, T, F> that is destructed will try to use `F` to fill the hole.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7763,"byte_end":7855,"line_start":102,"line_end":102,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7856,"byte_end":7859,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ If the scope ends without the `Hole` being filled, the program will `std::process::abort()`.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7860,"byte_end":7956,"line_start":104,"line_end":104,"column_start":1,"column_end":97}},{"value":"must_use","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":7957,"byte_end":7968,"line_start":105,"line_end":105,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8232,"byte_end":8236,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"fill","qualname":"<Hole>::fill","value":"fn (self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the Hole.\n","sig":null,"attributes":[{"value":"/ Fills the Hole.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8201,"byte_end":8220,"line_start":114,"line_end":114,"column_start":5,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1246,"byte_end":1250,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"take","qualname":"::take","value":"fn <T, F> (mut_ref: &mut T, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[{"value":"/ Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":704,"byte_end":823,"line_start":14,"line_end":14,"column_start":1,"column_end":120}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":824,"byte_end":827,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The closure must return a valid T.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":828,"byte_end":866,"line_start":16,"line_end":16,"column_start":1,"column_end":39}},{"value":"/ # Important","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":867,"byte_end":882,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/ Will abort the program if the closure panics.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":883,"byte_end":932,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":933,"byte_end":936,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":937,"byte_end":950,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":951,"byte_end":958,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":959,"byte_end":974,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/ let mut foo = Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":975,"byte_end":997,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"/ take_mut::take(&mut foo, |foo| {","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":998,"byte_end":1034,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/     // Can now consume the Foo, and provide a new value later","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1035,"byte_end":1100,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/     drop(foo);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1101,"byte_end":1119,"line_start":26,"line_end":26,"column_start":1,"column_end":19}},{"value":"/     // Do more stuff","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1120,"byte_end":1144,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/     Foo // Return new Foo from closure, which goes back into the &mut Foo","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1145,"byte_end":1222,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ });","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1223,"byte_end":1230,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1231,"byte_end":1238,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2595,"byte_end":2610,"line_start":81,"line_end":81,"column_start":8,"column_end":23},"name":"take_or_recover","qualname":"::take_or_recover","value":"fn <T, F, R> (mut_ref: &mut T, recover: R, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[{"value":"/ Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":1994,"byte_end":2113,"line_start":64,"line_end":64,"column_start":1,"column_end":120}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2114,"byte_end":2117,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The closure must return a valid T.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2118,"byte_end":2156,"line_start":66,"line_end":66,"column_start":1,"column_end":39}},{"value":"/ # Important","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2157,"byte_end":2172,"line_start":67,"line_end":67,"column_start":1,"column_end":16}},{"value":"/ Will replace `&mut T` with `recover` if the closure panics, then continues the panic.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2173,"byte_end":2262,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2263,"byte_end":2266,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2267,"byte_end":2280,"line_start":70,"line_end":70,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2281,"byte_end":2288,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ struct Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2289,"byte_end":2304,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/ let mut foo = Foo;","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2305,"byte_end":2327,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/ take_mut::take_or_recover(&mut foo, || Foo, |foo| {","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2328,"byte_end":2383,"line_start":74,"line_end":74,"column_start":1,"column_end":56}},{"value":"/     // Can now consume the Foo, and provide a new value later","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2384,"byte_end":2449,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/     drop(foo);","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2450,"byte_end":2468,"line_start":76,"line_end":76,"column_start":1,"column_end":19}},{"value":"/     // Do more stuff","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2469,"byte_end":2493,"line_start":77,"line_end":77,"column_start":1,"column_end":25}},{"value":"/     Foo // Return new Foo from closure, which goes back into the &mut Foo","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2494,"byte_end":2571,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ });","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2572,"byte_end":2579,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":2580,"byte_end":2587,"line_start":80,"line_end":80,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5747,"byte_end":5752,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8176,"byte_end":8180,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8547,"byte_end":8551,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","byte_start":695,"byte_end":701,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":5747,"byte_end":5752,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":9},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8176,"byte_end":8180,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","byte_start":8547,"byte_end":8551,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":32},"to":{"krate":2,"index":2076}}]}