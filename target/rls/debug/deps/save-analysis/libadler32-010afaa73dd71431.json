{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4","program":"/Users/adamtoth-fejel/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","adler32","/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=010afaa73dd71431","-C","extra-filename=-010afaa73dd71431","--out-dir","/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps","-L","dependency=/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/adamtoth-fejel/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/adamtoth-fejel/Documents/GitHub/sentry-rust/target/rls/debug/deps/libadler32-010afaa73dd71431.rmeta"},"prelude":{"crate_id":{"name":"adler32","disambiguator":[14035633471636886844,1714548495738443378]},"crate_root":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src","external_crates":[{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12669636623235690034,8759211680751900309]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5693088722327716739,2147858288623464010]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15524063101320593432,10022011492683157993]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14556973752653035032,10499433159243229334]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[1934112228416746928,18062520869078565162]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18272308394612376465,2983342869845535113]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7982440001281678496,5082264322901945876]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17333179571007866912,15310387900280001912]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17767206385810259554,6284392829264960128]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6917085151040958166,7936695879549379973]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[14883612992525439991,13188753928230923968]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8362867231865330830,11957228790523419708]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13374155178358367403,7714447127929209529]}},{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7401024017757537210,13419518921059338139]}}],"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":0,"byte_end":9587,"line_start":1,"line_end":307,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":0,"byte_end":9587,"line_start":1,"line_end":307,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":24}],"decl_id":null,"docs":" A minimal implementation of Adler32 for Rust.","sig":null,"attributes":[{"value":"! A minimal implementation of Adler32 for Rust.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":0,"byte_end":49,"line_start":1,"line_end":1,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":50,"byte_end":53,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This provides the simple method adler32(), that exhausts a Read and","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":54,"byte_end":125,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"! computes the Adler32 hash, as well as the RollingAdler32 struct, that can","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":126,"byte_end":203,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"! build a hash byte-by-byte, allowing to 'forget' past bytes in a rolling","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":204,"byte_end":279,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"! fashion.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":280,"byte_end":292,"line_start":6,"line_end":6,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":293,"byte_end":296,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The adler32 code has been translated (as accurately as I could manage) from","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":297,"byte_end":376,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"! the zlib implementation.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":377,"byte_end":405,"line_start":9,"line_end":9,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2935,"byte_end":2949,"line_start":87,"line_end":87,"column_start":12,"column_end":26},"name":"RollingAdler32","qualname":"::RollingAdler32","value":"RollingAdler32 {  }","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13}],"decl_id":null,"docs":" A rolling version of the Adler32 hash, which can 'forget' past bytes.","sig":null,"attributes":[{"value":"/ A rolling version of the Adler32 hash, which can 'forget' past bytes.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2644,"byte_end":2717,"line_start":82,"line_end":82,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2718,"byte_end":2721,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Calling remove() will update the hash to the value it would have if that","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2722,"byte_end":2798,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ past byte had never been fed to the algorithm. This allows you to get the","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2799,"byte_end":2876,"line_start":85,"line_end":85,"column_start":1,"column_end":78}},{"value":"/ hash of a rolling window very efficiently.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2877,"byte_end":2923,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3178,"byte_end":3181,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<RollingAdler32>::new","value":"fn () -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty Adler32 context (with hash 1).\n","sig":null,"attributes":[{"value":"/ Creates an empty Adler32 context (with hash 1).","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3115,"byte_end":3166,"line_start":99,"line_end":99,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3315,"byte_end":3325,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"from_value","qualname":"<RollingAdler32>::from_value","value":"fn (adler32: u32) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Creates an Adler32 context with the given initial value.\n","sig":null,"attributes":[{"value":"/ Creates an Adler32 context with the given initial value.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3243,"byte_end":3303,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3554,"byte_end":3565,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"from_buffer","qualname":"<RollingAdler32>::from_buffer","value":"fn (buffer: &[u8]) -> RollingAdler32","parent":null,"children":[],"decl_id":null,"docs":" Convenience function initializing a context from the hash of a buffer.\n","sig":null,"attributes":[{"value":"/ Convenience function initializing a context from the hash of a buffer.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3468,"byte_end":3542,"line_start":111,"line_end":111,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3748,"byte_end":3752,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"hash","qualname":"<RollingAdler32>::hash","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current hash.\n","sig":null,"attributes":[{"value":"/ Returns the current hash.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3707,"byte_end":3736,"line_start":118,"line_end":118,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3900,"byte_end":3906,"line_start":124,"line_end":124,"column_start":12,"column_end":18},"name":"remove","qualname":"<RollingAdler32>::remove","value":"fn (&mut self, size: usize, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes the given `byte` that was fed to the algorithm `size` bytes ago.\n","sig":null,"attributes":[{"value":"/ Removes the given `byte` that was fed to the algorithm `size` bytes ago.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3812,"byte_end":3888,"line_start":123,"line_end":123,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":4284,"byte_end":4290,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"update","qualname":"<RollingAdler32>::update","value":"fn (&mut self, byte: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a new `byte` to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a new `byte` to the algorithm to update the hash.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":4213,"byte_end":4272,"line_start":132,"line_end":132,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":4521,"byte_end":4534,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"update_buffer","qualname":"<RollingAdler32>::update_buffer","value":"fn (&mut self, buffer: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Feeds a vector of bytes to the algorithm to update the hash.\n","sig":null,"attributes":[{"value":"/ Feeds a vector of bytes to the algorithm to update the hash.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":4445,"byte_end":4509,"line_start":139,"line_end":139,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":24},"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":6107,"byte_end":6114,"line_start":194,"line_end":194,"column_start":8,"column_end":15},"name":"adler32","qualname":"::adler32","value":"fn <R> (mut reader: R) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Consume a Read object and returns the Adler32 hash.\n","sig":null,"attributes":[{"value":"/ Consume a Read object and returns the Adler32 hash.","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":6044,"byte_end":6099,"line_start":193,"line_end":193,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2996,"byte_end":3010,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3094,"byte_end":3108,"line_start":98,"line_end":98,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":2996,"byte_end":3010,"line_start":92,"line_end":92,"column_start":18,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":1874}},{"span":{"file_name":"/Users/adamtoth-fejel/.cargo/registry/src/github.com-1ecc6299db9ec823/adler32-1.0.4/src/lib.rs","byte_start":3094,"byte_end":3108,"line_start":98,"line_end":98,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}}]}